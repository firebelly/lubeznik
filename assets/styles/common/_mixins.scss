// Mixins

// Global UI Transition
@mixin transition($properties...) {
  transition-duration: $transition-duration;
  transition-property: $properties;
  transition-timing-function: $transition-easing;
}

// Squiggly Links
@mixin squiggle($style: default, $color: '2B2C2A', $hoverColor: 'F65F92', $hoverOnly: false, $hoverState: false) {
  padding-bottom: 12px;
  text-decoration: none;

  @if $hoverState == true {
    background-image: url("data:image/svg+xml;charset=utf8,%3Csvg id='squiggle-link' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:ev='http://www.w3.org/2001/xml-events' viewBox='0 0 24 6'%3E%3Cstyle type='text/css'%3E.squiggle{animation:shift .3s linear infinite;}@keyframes shift {from {transform:translateX(0);}to {transform:translateX(-24px);}}%3C/style%3E%3Cpath fill='none' stroke='%23#{$hoverColor}' stroke-width='2' class='squiggle' d='M 0,5 c 5,0 7,-4 12,-4 s 7,4 12,4 s 7,-4 12,-4 s 7,4 12,4'/%3E%3C/svg%3E");
  } @else {
    @if $style == 'alt' {
      @if $hoverOnly == false {
        background-image: url("data:image/svg+xml;charset=utf8,%3Csvg id='squiggle-link' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:ev='http://www.w3.org/2001/xml-events' viewBox='0 0 48 6'%3E%3Cpath fill='none' stroke='%23#{$color}' stroke-width='2' d='M 0,5 c 5,0 7,-4 12,-4 s 7,4 12,4 s 7,-4 12,-4 s 7,4 12,4'/%3E%3C/svg%3E");
      } @else {
        background-image: none;
      }
      background-size: 48px 6px;
      background-repeat: no-repeat;
      background-position: center 100%;
      &:hover,
      &:focus {
        background-image: url("data:image/svg+xml;charset=utf8,%3Csvg id='squiggle-link' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:ev='http://www.w3.org/2001/xml-events' viewBox='0 0 48 6'%3E%3Cstyle type='text/css'%3E.squiggle{animation:shift .6s linear infinite;}@keyframes shift {from {transform:translateX(0);}to {transform:translateX(-48px);}}%3C/style%3E%3Cpath fill='none' stroke='%23#{$hoverColor}' stroke-width='2' class='squiggle' d='M 0,5 c 5,0 7,-4 12,-4 s 7,4 12,4 s 7,-4 12,-4 s 7,4 12,4  s 7,-4 12,-4 s 7,4 12,4 s 7,-4 12,-4 s 7,4 12,4'/%3E%3C/svg%3E");
      }
    } @else {
      @if $hoverOnly == false {
        background-image: url("data:image/svg+xml;charset=utf8,%3Csvg id='squiggle-link' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:ev='http://www.w3.org/2001/xml-events' viewBox='0 0 24 6'%3E%3Cpath fill='none' stroke='%23#{$color}' stroke-width='2' d='M 0,5 c 5,0 7,-4 12,-4 s 7,4 12,4 s 7,-4 12,-4 s 7,4 12,4'/%3E%3C/svg%3E");
      } @else {
        background-image: none;
      }
      background-size: auto 6px;
      background-position: 0 100%;
      background-repeat: repeat-x;

      &:hover,
      &:focus {
        background-image: url("data:image/svg+xml;charset=utf8,%3Csvg id='squiggle-link' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xmlns:ev='http://www.w3.org/2001/xml-events' viewBox='0 0 24 6'%3E%3Cstyle type='text/css'%3E.squiggle{animation:shift .3s linear infinite;}@keyframes shift {from {transform:translateX(0);}to {transform:translateX(-24px);}}%3C/style%3E%3Cpath fill='none' stroke='%23#{$hoverColor}' stroke-width='2' class='squiggle' d='M 0,5 c 5,0 7,-4 12,-4 s 7,4 12,4 s 7,-4 12,-4 s 7,4 12,4'/%3E%3C/svg%3E");
      }
    }
  }
}

// Clearfix
@mixin clearfix {
  &:after {
    content: '';
    display: table;
    clear: both;
  }
}
%clearfix {
  @include clearfix;
}

@mixin vertical-center {
  display: flex;
  justify-content: center;
  align-items: center;
}

// Screen reader only
@mixin sr-only {
  position: absolute;
  width: 1px;
  height: 1px;
  padding: 0;
  margin: -1px;
  overflow: hidden;
  clip: rect(0,0,0,0);
  border: 0;
}

// Aspect ratio padding mixin
@mixin aspect-ratio($width, $height) {
  display: block;
  position: relative;
  height: 0;
  padding-top: #{$height / $width * 100%};
}

// Smooth text
@mixin smooth {
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}
%smooth {
  @include smooth;
}

// Responsive mixins by Andy Richardson (@andimal): https://github.com/andimal/sass-responsive-mixin-madness
@mixin media-xs() {
  @media screen and (max-width: $breakpoint-sm - 1) {
    @content;
  }
}
@mixin media-sm() {
  @media screen and (min-width: $breakpoint-sm) {
    @content;
  }
}
@mixin media-md() {
  @media screen and (min-width: $breakpoint-md) {
    @content;
  }
}
@mixin media-nav() {
  @media screen and (min-width: $breakpoint-nav) {
    @content;
  }
}
@mixin media-lg() {
  @media screen and (min-width: $breakpoint-lg) {
    @content;
  }
}
@mixin media-xl() {
  @media screen and (min-width: $breakpoint-xl) {
    @content;
  }
}

// On-the fly media-queries
@mixin screen($res-min, $res-max) {
  @media screen and (min-width: $res-min) and (max-width: #{$res-max - 1px}) {
    @content;
  }
}
@mixin max-screen($res) {
  @media screen and (max-width: #{$res - 1px}) {
    @content;
  }
}
@mixin min-screen($res) {
  @media screen and (min-width: $res) {
    @content;
  }
}
