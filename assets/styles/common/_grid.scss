// Grid system

$grid: 10px;
$gutter: 20px;

// Padding/Spacing
$padding-xs: 16px;
$padding-sm: 64px;
$padding-md: 80px;
$padding-lg: $padding-md * 2;

// Global padding mixin for easy class-based padding
@mixin padding($direction: 'both', $sides: 'both') {
  @if $direction == 'both' or $direction == 'vertical' {
    @if $sides == 'both' or $sides == 'top' {
      padding-top: $padding-xs;
      @include media-sm {
        padding-top: $padding-sm;
      }
      @include media-md {
        padding-top: $padding-md;
      }
      @include media-lg {
        padding-top: $padding-lg;
      }
    }
    @if $sides == 'both' or $sides == 'bottom' {
      padding-bottom: $padding-xs;
      @include media-sm {
        padding-bottom: $padding-sm;
      }
      @include media-md {
        padding-bottom: $padding-md;
      }
      @include media-lg {
        padding-bottom: $padding-lg;
      }
    }
  }
  @if $direction == 'both' or $direction == 'horizontal' {
    @if $sides == 'both' or $sides == 'left' {
      padding-left: $padding-xs;
      @include media-sm {
        padding-left: $padding-sm;
      }
      @include media-md {
        padding-left: $padding-md;
      }
      @include media-lg {
        padding-left: $padding-lg;
      }
    }
    @if $sides == 'both' or $sides == 'right' {
      padding-right: $padding-xs;
      @include media-sm {
        padding-right: $padding-sm;
      }
      @include media-md {
        padding-right: $padding-md;
      }
      @include media-lg {
        padding-right: $padding-lg;
      }
    }
  }
}
%padding,
.padding {
  @include padding('both', 'both');
}
%padding-vertical,
.padding-vertical {
  @include padding('vertical');
}
%padding-top,
.padding-top {
  @include padding('vertical', 'top');
}
%padding-bottom,
.padding-bottom {
  @include padding('vertical', 'bottom');
}
%padding-horizontal,
.padding-horizontal {
  @include padding('horizontal');
}
%padding-left,
.padding-left {
  @include padding('horizontal', 'left');
}
%padding-right,
.padding-right {
  @include padding('horizontal', 'right');
}

// Global margin mixin for easy class-based margins
@mixin margins($direction: 'both', $sides: 'both') {
  @if $direction == 'both' or $direction == 'vertical' {
    @if $sides == 'both' or $sides == 'top' {
      margin-top: $padding-xs;
      @include media-sm {
        margin-top: $padding-sm;
      }
      @include media-md {
        margin-top: $padding-md;
      }
      @include media-lg {
        margin-top: $padding-lg;
      }
    }
    @if $sides == 'both' or $sides == 'bottom' {
      margin-bottom: $padding-xs;
      @include media-sm {
        margin-bottom: $padding-sm;
      }
      @include media-md {
        margin-bottom: $padding-md;
      }
      @include media-lg {
        margin-bottom: $padding-lg;
      }
    }
  }
  @if $direction == 'both' or $direction == 'horizontal' {
    @if $sides == 'both' or $sides == 'left' {
      margin-left: $padding-xs;
      @include media-sm {
        margin-left: $padding-sm;
      }
      @include media-md {
        margin-left: $padding-md;
      }
      @include media-lg {
        margin-left: $padding-lg;
      }
    }
    @if $sides == 'both' or $sides == 'right' {
      margin-right: $padding-xs;
      @include media-sm {
        margin-right: $padding-sm;
      }
      @include media-md {
        margin-right: $padding-md;
      }
      @include media-lg {
        margin-right: $padding-lg;
      }
    }
  }
}
%margins,
.margins {
  @include margins('both', 'both');
}
%margins-vertical,
.margins-vertical {
  @include margins('vertical');
}
%margin-top,
.margin-top {
  @include margins('vertical', 'top');
}
%margin-bottom,
.margin-bottom {
  @include margins('vertical', 'bottom');
}
%margins-horizontal,
.margins-horizontal {
  @include margins('horizontal');
}
%margin-left,
.margin-left {
  @include margins('horizontal', 'left');
}
%margin-right,
.margin-right {
  @include margins('horizontal', 'right');
}

$global-columns: 10;
$column-width: 100% / $global-columns;

// Quickie columns($num-columns, $parent-num-columns) function
@function columns($num-columns, $parent-num-columns: $global-columns) {
  @return $column-width * $num-columns * ($global-columns / $parent-num-columns);
}
@function grid($num) {
  @return $grid * $num;
}

// Common padding
@mixin global-padding($desktop-padding:12, $desktop-parent-columns:$global-columns) {
  padding: $padding-sm;

  // Desktop styles
  @include media-md {
    padding: grid($desktop-padding) columns(2, $desktop-parent-columns);
  }
}

.row {
  @include clearfix;
}

.grid {
  width: 100%;
  display: flex;
  flex-wrap: wrap;

  > * {
    width: 100%;
    max-width: 100%;
    flex-basis: 100%;
  }

  &.align-right {
    flex-direction: row-reverse;
  }

  &.align-left {
    align-items: flex-start;
  }

  // SPACING:
  // If you need them spaced with padding,
  // just add "spaced" class to the ".grid" container.
  // If a column item needs to be spaced but also
  // has a background color then add an inner container
  // to handle the background — use the non-specific
  // '-inner' class if you need to:
  // <div class="grid spaced">
  //   <div class="col-1-2 -left">
  //     <div class="-inner" style="background:black;">
  //       (content)
  //     </div>
  //   </div>
  // </div>
  &.spaced,
  &.spaced-lg {
    margin-left: -#{$padding-sm / 2};
    width: calc(100% + #{$padding-sm});

    > [class*='col-'] {
      padding-left: #{$padding-sm / 2};
      padding-right: #{$padding-sm / 2};
    }

    @include media-md {
      margin-left: -#{$padding-md / 2};
      width: calc(100% + #{$padding-md});

      > [class*='col-'],
      .md-full {
        padding-left: #{$padding-md / 2};
        padding-right: #{$padding-md / 2};
      }
    }
  }
  &.spaced-lg {
    @include media-xl {
      margin-left: -#{$padding-lg / 2};
      width: calc(100% + #{$padding-lg});

      > [class*='col-'],
      .lg-full {
        padding-left: #{$padding-lg / 2};
        padding-right: #{$padding-lg / 2};
      }
    }
  }
  // If you need the grid to have a gutter,
  // add 'gutter' as a class to the '.grid' container
  &.gutter {
    padding-left: $padding-sm;

    [class*='col-'] {
      padding-right: $padding-sm;
    }

    @include media-md {
      padding-left: $padding-md;

      [class*='col-'] {
        padding-right: $padding-md;
      }
    }
  }
}

// Float Grid Alternative
.float-grid {
  width: 100%;
  @include clearfix;

  > * {
    width: 100%;
    float: none;
  }

  @include media-md {
    > * {
      float: left;
    }
  }
}

// 'col' classes
// The convention is 'col-' followed by a ratio,
// which is written as (for example) '1-2' for '1/2'.
// 1/3 = 'col-1-3', 2/3 = 'col-2-3', etc.
.col-auto {
  width: auto;
  max-width: none;
  flex-basis: auto;
}
.col-1-4 {
  max-width: 25%;
  flex-basis: 25%;
}
.col-1-3 {
  flex-basis: 33.3333333%;
  max-width: 33.3333333%;
}
.col-1-2 {
  flex-basis: 50%;
  max-width: 50%;
}
.col-2-3 {
  flex-basis: 66.6666667%;
  max-width: 66.6666667%;
}
.col-3-4 {
  flex-basis: 75%;
  max-width: 75%;
}

@include media-sm {
  .col-sm-auto {
    width: auto;
    max-width: none;
    flex-basis: auto;
  }
  .col-sm-full {
    width: 100%;
    max-width: none;
    flex-basis: 100%;
  }
  .col-sm-1-4 {
    max-width: 25%;
    flex-basis: 25%;
  }
  .col-sm-1-3 {
    flex-basis: 33.3333333%;
    max-width: 33.3333333%;
  }
  .col-sm-1-2 {
    flex-basis: 50%;
    max-width: 50%;
  }
  .col-sm-2-3 {
    flex-basis: 66.6666667%;
    max-width: 66.6666667%;
  }
  .col-sm-3-4 {
    flex-basis: 75%;
    max-width: 75%;
  }
  // Order classes
  @for $i from 0 through 6 {
    .order-sm-#{$i} {
      order: $i;
    }
  }
}

@include media-md {
  .col-md-auto {
    width: auto;
    max-width: none;
    flex-basis: auto;
  }
  .col-md-full {
    width: 100%;
    max-width: none;
    flex-basis: 100%;
  }
  .col-md-1-4 {
    max-width: 25%;
    flex-basis: 25%;
  }
  .col-md-1-3 {
    flex-basis: 33.3333333%;
    max-width: 33.3333333%;
  }
  .col-md-1-2 {
    flex-basis: 50%;
    max-width: 50%;
  }
  .col-md-2-3 {
    flex-basis: 66.6666667%;
    max-width: 66.6666667%;
  }
  .col-md-3-4 {
    flex-basis: 75%;
    max-width: 75%;
  }
  // Order classes
  @for $i from 0 through 6 {
    .order-md-#{$i} {
      order: $i;
    }
  }
}

@include media-lg {
  .col-lg-auto {
    width: auto;
    max-width: none;
    flex-basis: auto;
  }
  .col-lg-full {
    width: 100%;
    max-width: none;
    flex-basis: 100%;
  }
  .col-lg-1-4 {
    max-width: 25%;
    flex-basis: 25%;
  }
  .col-lg-1-3 {
    flex-basis: 33.3333333%;
    max-width: 33.3333333%;
  }
  .col-lg-1-2 {
    flex-basis: 50%;
    max-width: 50%;
  }
  .col-lg-2-3 {
    flex-basis: 66.6666667%;
    max-width: 66.6666667%;
  }
  .col-lg-3-4 {
    flex-basis: 75%;
    max-width: 75%;
  }
  // Order classes
  @for $i from 0 through 6 {
    .order-lg-#{$i} {
      order: $i;
    }
  }
}

@include media-nav {
  .col-nav-auto {
    width: auto;
    max-width: none;
    flex-basis: auto;
  }
  .col-nav-full {
    width: 100%;
    max-width: none;
    flex-basis: 100%;
  }
  .col-nav-1-4 {
    max-width: 25%;
    flex-basis: 25%;
  }
  .col-nav-1-3 {
    flex-basis: 33.3333333%;
    max-width: 33.3333333%;
  }
  .col-nav-1-2 {
    flex-basis: 50%;
    max-width: 50%;
  }
  .col-nav-2-3 {
    flex-basis: 66.6666667%;
    max-width: 66.6666667%;
  }
  .col-nav-3-4 {
    flex-basis: 75%;
    max-width: 75%;
  }
  // Order classes
  @for $i from 0 through 6 {
    .order-nav-#{$i} {
      order: $i;
    }
  }
}

@include media-xl {
  .col-xl-auto {
    width: auto;
    max-width: none;
    flex-basis: auto;
  }
  .col-xl-full {
    width: 100%;
    max-width: none;
    flex-basis: 100%;
  }
  .col-xl-1-4 {
    max-width: 25%;
    flex-basis: 25%;
  }
  .col-xl-1-3 {
    flex-basis: 33.3333333%;
    max-width: 33.3333333%;
  }
  .col-xl-1-2 {
    flex-basis: 50%;
    max-width: 50%;
  }
  .col-xl-2-3 {
    flex-basis: 66.6666667%;
    max-width: 66.6666667%;
  }
  .col-xl-3-4 {
    flex-basis: 75%;
    max-width: 75%;
  }
  // Order classes
  @for $i from 0 through 6 {
    .order-xl-#{$i} {
      order: $i;
    }
  }
}